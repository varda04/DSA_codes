{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f01d0f48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the size of the hash table: 3\n",
      "----------------MENU-----------------\n",
      "Choose among the following operations to perform on hash table\n",
      "1. Insert\n",
      "2. Search\n",
      "3. Exit\n",
      "Enter your choice: 1\n",
      "Insert number to be entered: 2\n",
      "Key successfully inserted.\n",
      "[-1, -1, 2]\n",
      "----------------MENU-----------------\n",
      "Choose among the following operations to perform on hash table\n",
      "1. Insert\n",
      "2. Search\n",
      "3. Exit\n",
      "Enter your choice: 1\n",
      "Insert number to be entered: 3\n",
      "Key successfully inserted.\n",
      "[3, -1, 2]\n",
      "----------------MENU-----------------\n",
      "Choose among the following operations to perform on hash table\n",
      "1. Insert\n",
      "2. Search\n",
      "3. Exit\n",
      "Enter your choice: 1\n",
      "Insert number to be entered: 7\n",
      "Key successfully inserted.\n",
      "[3, 7, 2]\n",
      "----------------MENU-----------------\n",
      "Choose among the following operations to perform on hash table\n",
      "1. Insert\n",
      "2. Search\n",
      "3. Exit\n",
      "Enter your choice: 2\n",
      "Insert number to be searched: 8\n",
      "Key not present in the hash table.\n",
      "----------------MENU-----------------\n",
      "Choose among the following operations to perform on hash table\n",
      "1. Insert\n",
      "2. Search\n",
      "3. Exit\n",
      "Enter your choice: 3\n",
      "Exiting.\n"
     ]
    }
   ],
   "source": [
    "def insert_lp(n, ht, key):\n",
    "    loc= key%n\n",
    "    cnt=0\n",
    "    step=0\n",
    "    while(ht[loc]!= -1 and cnt!=n):\n",
    "        loc= (loc+(step*step))%n\n",
    "        cnt=cnt+1\n",
    "        step+=1\n",
    "    if cnt==n:\n",
    "        print(\"Hash table is currently full!!!\")\n",
    "    else:\n",
    "        ht[loc]=key\n",
    "        print(\"Key successfully inserted.\")\n",
    "    print(ht)\n",
    "    \n",
    "\n",
    "def search_lp(n, ht, key):\n",
    "    loc= key%n\n",
    "    cnt=0\n",
    "    step=0\n",
    "    while(ht[loc]!= key and cnt!=n):\n",
    "        loc= (loc+(step*step))%n\n",
    "        cnt+=1\n",
    "        step+=1\n",
    "    if cnt==n:\n",
    "        print(\"Key not present in the hash table.\")\n",
    "    else:\n",
    "        print(\"Key found.\")\n",
    "\n",
    "def main():\n",
    "    n=int(input(\"Enter the size of the hash table: \"))\n",
    "    ht=[]\n",
    "    for i in range(n):\n",
    "        ht.append(-1)\n",
    "    flag=1\n",
    "    while(flag):\n",
    "        print(\"----------------MENU-----------------\")\n",
    "        print(\"Choose among the following operations to perform on hash table\")\n",
    "        print(\"1. Insert\")\n",
    "        print(\"2. Search\")\n",
    "        print(\"3. Exit\")\n",
    "        c=int(input(\"Enter your choice: \"))\n",
    "        if c==1:\n",
    "            key=int(input(\"Insert number to be entered: \"))\n",
    "            insert_lp(n,ht,key)\n",
    "        elif c==2:\n",
    "            key=int(input(\"Insert number to be searched: \"))\n",
    "            search_lp(n,ht,key)\n",
    "        elif c==3:\n",
    "            print(\"Exiting.\")\n",
    "            flag=0\n",
    "        else:\n",
    "            print(\"Enter valid choice!!!\")\n",
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c60b00e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
